



float a,current,previous=0.0,diff,Z[3][1],X[3][1],Y[2][1],S[2][2],K[3][2],I[3][3],XTEMP[3][1],PTEMP[3][3],TEMP33[3][3],TEMP33a[3][3],TEMP21[2][1],TEMP23[2][3],TEMP32[2][3],TEMP31[3][1],TEMP22[2][2],HT[3][2];

float P[3][3]={{1,0,0},
               {0,1,0},
               {0,0,1}};
               
float F[3][3]={{0,0,0},
               {0,0,0},
               {0,0,0}};

float H[2][3]={{1,0,0},
               {0,0,1}};

float R[2][2]={{0.1,0.1},
               {0.1,0.1}};
               

               



void getaccel(){
}

void getheight(){
}

void updatematrix(){
}

void printX(){
}

   
void MatrixPrint(float* A, int m, int n, String label){
	// A = input matrix (m x n)
	int i,j;
	Serial.println();
	Serial.println(label);
	for (i=0; i<m; i++){
		for (j=0;j<n;j++){
			Serial.print(A[n*i+j]);
			Serial.print("\t");
		}
		Serial.println();
	}
}

void MatrixCopy(float* A, int n, int m, float* B)
{
	int i, j, k;
	for (i=0;i<m;i++)
		for(j=0;j<n;j++)
		{
			B[n*i+j] = A[n*i+j];
		}
}   

//Matrix Multiplication Routine
// C = A*B
void MatrixMultiply(float* A, float* B, int m, int p, int n, float* C)
{
	// A = input matrix (m x p)
	// B = input matrix (p x n)
	// m = number of rows in A
	// p = number of columns in A = number of rows in B
	// n = number of columns in B
	// C = output matrix = A*B (m x n)
	int i, j, k;
	for (i=0;i<m;i++)
		for(j=0;j<n;j++)
		{
			C[n*i+j]=0;
			for (k=0;k<p;k++)
				C[n*i+j]= C[n*i+j]+A[p*i+k]*B[n*k+j];
		}
}


//Matrix Addition Routine
void MatrixAdd(float* A, float* B, int m, int n, float* C)
{
	// A = input matrix (m x n)
	// B = input matrix (m x n)
	// m = number of rows in A = number of rows in B
	// n = number of columns in A = number of columns in B
	// C = output matrix = A+B (m x n)
	int i, j;
	for (i=0;i<m;i++)
		for(j=0;j<n;j++)
			C[n*i+j]=A[n*i+j]+B[n*i+j];
}


//Matrix Subtraction Routine
void MatrixSubtract(float* A, float* B, int m, int n, float* C)
{
	// A = input matrix (m x n)
	// B = input matrix (m x n)
	// m = number of rows in A = number of rows in B
	// n = number of columns in A = number of columns in B
	// C = output matrix = A-B (m x n)
	int i, j;
	for (i=0;i<m;i++)
		for(j=0;j<n;j++)
			C[n*i+j]=A[n*i+j]-B[n*i+j];
}


//Matrix Transpose Routine
void MatrixTranspose(float* A, int m, int n, float* C)
{
	// A = input matrix (m x n)
	// m = number of rows in A
	// n = number of columns in A
	// C = output matrix = the transpose of A (n x m)
	int i, j;
	for (i=0;i<m;i++)
		for(j=0;j<n;j++)
			C[m*j+i]=A[n*i+j];
}

void MatrixScale(float* A, int m, int n, float k)
{
	for (int i=0; i<m; i++)
		for (int j=0; j<n; j++)
			A[n*i+j] = A[n*i+j]*k;
}


int MatrixInvert(float* A, int n)
{
	// A = input matrix AND result matrix
	// n = number of rows = number of columns in A (n x n)
	int pivrow;		// keeps track of current pivot row
	int k,i,j;		// k: overall index along diagonal; i: row index; j: col index
	int pivrows[n]; // keeps track of rows swaps to undo at end
	float tmp;		// used for finding max value and making column swaps

	for (k = 0; k < n; k++)
	{
		// find pivot row, the row with biggest entry in current column
		tmp = 0;
		for (i = k; i < n; i++)
		{
			if (abs(A[i*n+k]) >= tmp)	// 'Avoid using other functions inside abs()?'
			{
				tmp = abs(A[i*n+k]);
				pivrow = i;
			}
		}

		// check for singular matrix
		if (A[pivrow*n+k] == 0.0f)
		{
			Serial.println("Inversion failed due to singular matrix");
			return 0;
		}

		// Execute pivot (row swap) if needed
		if (pivrow != k)
		{
			// swap row k with pivrow
			for (j = 0; j < n; j++)
			{
				tmp = A[k*n+j];
				A[k*n+j] = A[pivrow*n+j];
				A[pivrow*n+j] = tmp;
			}
		}
		pivrows[k] = pivrow;	// record row swap (even if no swap happened)

		tmp = 1.0f/A[k*n+k];	// invert pivot element
		A[k*n+k] = 1.0f;		// This element of input matrix becomes result matrix

		// Perform row reduction (divide every element by pivot)
		for (j = 0; j < n; j++)
		{
			A[k*n+j] = A[k*n+j]*tmp;
		}

		// Now eliminate all other entries in this column
		for (i = 0; i < n; i++)
		{
			if (i != k)
			{
				tmp = A[i*n+k];
				A[i*n+k] = 0.0f;  // The other place where in matrix becomes result mat
				for (j = 0; j < n; j++)
				{
					A[i*n+j] = A[i*n+j] - A[k*n+j]*tmp;
				}
			}
		}
	}

	// Done, now need to undo pivot row swaps by doing column swaps in reverse order
	for (k = n-1; k >= 0; k--)
	{
		if (pivrows[k] != k)
		{
			for (i = 0; i < n; i++)
			{
				tmp = A[i*n+k];
				A[i*n+k] = A[i*n+pivrows[k]];
				A[i*n+pivrows[k]] = tmp;
			}
		}
	}
	return 1;
}



void setup()
{
  Serial.begin(9600);
  //initI2CMPU();
  
  
}

void loop()
{
  getaccel();
  getheight();
  current=millis()/1000;
  diff=current-previous;
  previous=current;
  updatematrix();
  kalman();
  printX();
}

void kalman()
{
  
  //Measurement update
  MatrixMultiply((float*)H,(float*)X,2,3,1,(float*)TEMP21);
  MatrixSubtract((float*)Z,(float*)TEMP21,2,1,(float*)Y);
  
  MatrixTranspose((float*)H,2,3,(float*)HT);
  MatrixMultiply((float*)H,(float*)P,2,3,3,(float*)TEMP23);
  MatrixMultiply((float*)TEMP23,(float*)HT,2,3,2,(float*)TEMP22);
  MatrixAdd((float*)TEMP22,(float*)R,2,2,(float*)S);
  
  
  MatrixInvert((float*)S,2);
  MatrixMultiply((float*)P,(float*)HT,3,3,2,(float*)TEMP32);
  MatrixMultiply((float*)TEMP32,(float*)S,3,2,2,(float*)K);
  
  MatrixMultiply((float*)K,(float*)Y,3,2,1,(float*)TEMP31);
  MatrixAdd((float*)X,(float*)TEMP31,3,1,(float*)XTEMP);
  MatrixCopy((float*)XTEMP,3,1,(float*)X);
  
  MatrixMultiply((float*)K,(float*)H,3,2,3,(float*)TEMP33);
  MatrixSubtract((float*)I,(float*)TEMP33,3,3,(float*)TEMP33a);
  MatrixMultiply((float*)TEMP33a,(float*)P,3,3,3,(float*)PTEMP);
  MatrixCopy((float*)PTEMP,3,3,(float*)P);
  
  
  //Prediction
  MatrixMultiply((float*)F,(float*)X,3,3,1,(float*)XTEMP);
  MatrixCopy((float*)XTEMP,3,1,(float*)X);
  
  MatrixTranspose((float*)F,3,3,(float*)TEMP33);
  MatrixMultiply((float*)F,(float*)P,3,3,3,(float*)TEMP33a);
  MatrixMultiply((float*)TEMP33a,(float*)TEMP33,3,3,3,(float*)P);  
}
