#include <Wire.h>


#define scale 98
#define echoPin 18 // Echo Pin
#define trigPin 19 // Trigger Pin

float duration;
#define GYRO_XOUT_REGISTER  0x43
#define GYRO_YOUT_REGISTER  0x45
#define GYRO_ZOUT_REGISTER  0x47

#define ACCELO_XOUT_REGISTER 0x3B
#define ACCELO_YOUT_REGISTER 0x3D
#define ACCELO_ZOUT_REGISTER 0x3F

#define TEMP_OUT_REGISTER 0x41

/*The below register addresses are for the configuration bits of the gyrometer and accelometer ranges*/
#define GYRO_CONFIG_REGISTER 0x1B
#define FS_SEL_BIT 3//0-> +-250 deg/s 1-> +-500 deg/s 0-> +-1000 deg/s 0-> +-2000 deg/s

#define ACCEL0_CONFIG_REGISTER 0x1C
#define AFS_SEL_BIT 3//0-> +-2g 1-> +-4g 0-> +-8g 0-> +-16g

/*One of the power registers.  Contains the Sleep mode bit. The sleep mode bit should be set to 0 for sleep mode to be deactivated.*/
#define PWR_MGMT_1_REGISTER 0x6B

#define MPU_ADDRESS 0x68 // Can be made 0x69 as well using the AD0 pin of the IMU.

#define CONFIG_REGISTER 0x1A //The register containing the DLPF bits.

#define CONFIG_VALUE  5  //0->260Hz  1->184Hz  2->94Hz  3->44Hz  4->21Hz  5->260Hz  6->10Hz  7->5Hz
//It is should be noted that decreasing the bandwidth increases the delay.
/*The dividing factors. They change with different modes of operation of the gyro and accelerometer*/
#define ACCELO_DIVIDING_FACTOR 16384//2g->16384  4g->8192  8g->4096  16g->2048
#define GYRO_DIVIDING_FACTOR 131  //250dps->131  500dps->65.5  1000dps->32.8  2000dps->16.4 

/*For temperature sensor*/
#define TEMP_DIVIDING_FACTOR 340
#define TEMP_OFFSET  36.53


int16_t accx;
int16_t accy;
int16_t accz;

int16_t wwx;
int16_t wwy;
int16_t wwz;

float ax;
float ay;
float az;
float wx;
float wy;
float wz;
float temperature;
float offset;



float z,a,current,previous=0.0,diff,Z[2][1],X[3][1],Y[2][1],S[2][2],K[3][2],I[3][3],XTEMP[3][1],PTEMP[3][3],TEMP33[3][3],TEMP33a[3][3],TEMP21[2][1],TEMP23[2][3],TEMP32[2][3],TEMP31[3][1],TEMP22[2][2],HT[3][2];

float P[3][3]={{1,0,0},
               {0,1,0},
               {0,0,1}};
               
float F[3][3]={{1,diff,0.5*diff*diff},
               {0, 1  ,   diff      },
               {0, 0  ,    1        }};

float H[2][3]={{1,0,0},
               {0,0,1}};

float R[2][2]={{0.1,0.1},
               {0.1,0.1}};
               

               
void printX(){
  Serial.print(Z[0][0]);Serial.print('\t');
  Serial.print(Z[1][0]);Serial.print('\t');
  Serial.print(X[0][0]);Serial.print('\t');
  Serial.print(X[1][0]);Serial.print('\t');
  Serial.print(X[2][0]);Serial.print('\t');
  Serial.println();
}

void updatematrix(){
  
  F[0][1]=diff;
  F[0][2]=0.5*diff*diff;
  F[1][2]=diff;
}


void initI2CMPU(void) //Begins I2C communication with  MPU using it's internal 8MHz oscillator for CLKSEL and also wakes up the MPU.
{
  Wire.begin();

  Wire.beginTransmission(MPU_ADDRESS);

  Wire.write(PWR_MGMT_1_REGISTER);
  Wire.write(0);

  Wire.endTransmission(true);
  Wire.beginTransmission(MPU_ADDRESS);

  Wire.write(CONFIG_REGISTER);
  Wire.write(CONFIG_VALUE);

  Wire.endTransmission(true);

}

void getMPUValues(void)
{
  Wire.beginTransmission(MPU_ADDRESS);
  Wire.write(ACCELO_XOUT_REGISTER);
  Wire.endTransmission(false);

  Wire.requestFrom(MPU_ADDRESS, 14, true);

  if (Wire.available())
  {
    accx = (Wire.read() << 8) | Wire.read();
    accy = (Wire.read() << 8) | Wire.read();
    accz = (Wire.read() << 8) | Wire.read();

    temperature = (Wire.read() << 8) | Wire.read();

    wwx = (Wire.read() << 8) | Wire.read();
    wwy = (Wire.read() << 8) | Wire.read();
    wwz = (Wire.read() << 8) | Wire.read();
  }
  
  ax=(float)accx/16384;
  ay=(float)accy/16384;
  az=(float)accz/16384;
  
  wx=(wwx/131)*(3.14/180);
  wy=(wwy/131)*(3.14/180);
  wz=(wwz/131)*(3.14/180);
}
void getheight()
{
  //height from sonar
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);

  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  //Calculate the distance (in cm) based on the speed of sound.
  z = duration/58.2;
  Z[0][0]=z;
  
}
void getaccel()
{
  //acceleration from imu
  getMPUValues();
  a=(az-offset)*scale;
  Z[1][0]=a;
  
}

   
void MatrixPrint(float* A, int m, int n, String label){
	// A = input matrix (m x n)
	int i,j;
	Serial.println();
	Serial.println(label);
	for (i=0; i<m; i++){
		for (j=0;j<n;j++){
			Serial.print(A[n*i+j]);
			Serial.print("\t");
		}
		Serial.println();
	}
}

void MatrixCopy(float* A, int n, int m, float* B)
{
	int i, j, k;
	for (i=0;i<m;i++)
		for(j=0;j<n;j++)
		{
			B[n*i+j] = A[n*i+j];
		}
}   

//Matrix Multiplication Routine
// C = A*B
void MatrixMultiply(float* A, float* B, int m, int p, int n, float* C)
{
	// A = input matrix (m x p)
	// B = input matrix (p x n)
	// m = number of rows in A
	// p = number of columns in A = number of rows in B
	// n = number of columns in B
	// C = output matrix = A*B (m x n)
	int i, j, k;
	for (i=0;i<m;i++)
		for(j=0;j<n;j++)
		{
			C[n*i+j]=0;
			for (k=0;k<p;k++)
				C[n*i+j]= C[n*i+j]+A[p*i+k]*B[n*k+j];
		}
}


//Matrix Addition Routine
void MatrixAdd(float* A, float* B, int m, int n, float* C)
{
	// A = input matrix (m x n)
	// B = input matrix (m x n)
	// m = number of rows in A = number of rows in B
	// n = number of columns in A = number of columns in B
	// C = output matrix = A+B (m x n)
	int i, j;
	for (i=0;i<m;i++)
		for(j=0;j<n;j++)
			C[n*i+j]=A[n*i+j]+B[n*i+j];
}


//Matrix Subtraction Routine
void MatrixSubtract(float* A, float* B, int m, int n, float* C)
{
	// A = input matrix (m x n)
	// B = input matrix (m x n)
	// m = number of rows in A = number of rows in B
	// n = number of columns in A = number of columns in B
	// C = output matrix = A-B (m x n)
	int i, j;
	for (i=0;i<m;i++)
		for(j=0;j<n;j++)
			C[n*i+j]=A[n*i+j]-B[n*i+j];
}


//Matrix Transpose Routine
void MatrixTranspose(float* A, int m, int n, float* C)
{
	// A = input matrix (m x n)
	// m = number of rows in A
	// n = number of columns in A
	// C = output matrix = the transpose of A (n x m)
	int i, j;
	for (i=0;i<m;i++)
		for(j=0;j<n;j++)
			C[m*j+i]=A[n*i+j];
}

void MatrixScale(float* A, int m, int n, float k)
{
	for (int i=0; i<m; i++)
		for (int j=0; j<n; j++)
			A[n*i+j] = A[n*i+j]*k;
}


int MatrixInvert(float* A, int n)
{
	// A = input matrix AND result matrix
	// n = number of rows = number of columns in A (n x n)
	int pivrow;		// keeps track of current pivot row
	int k,i,j;		// k: overall index along diagonal; i: row index; j: col index
	int pivrows[n]; // keeps track of rows swaps to undo at end
	float tmp;		// used for finding max value and making column swaps

	for (k = 0; k < n; k++)
	{
		// find pivot row, the row with biggest entry in current column
		tmp = 0;
		for (i = k; i < n; i++)
		{
			if (abs(A[i*n+k]) >= tmp)	// 'Avoid using other functions inside abs()?'
			{
				tmp = abs(A[i*n+k]);
				pivrow = i;
			}
		}

		// check for singular matrix
		if (A[pivrow*n+k] == 0.0f)
		{
			Serial.println("Inversion failed due to singular matrix");
			return 0;
		}

		// Execute pivot (row swap) if needed
		if (pivrow != k)
		{
			// swap row k with pivrow
			for (j = 0; j < n; j++)
			{
				tmp = A[k*n+j];
				A[k*n+j] = A[pivrow*n+j];
				A[pivrow*n+j] = tmp;
			}
		}
		pivrows[k] = pivrow;	// record row swap (even if no swap happened)

		tmp = 1.0f/A[k*n+k];	// invert pivot element
		A[k*n+k] = 1.0f;		// This element of input matrix becomes result matrix

		// Perform row reduction (divide every element by pivot)
		for (j = 0; j < n; j++)
		{
			A[k*n+j] = A[k*n+j]*tmp;
		}

		// Now eliminate all other entries in this column
		for (i = 0; i < n; i++)
		{
			if (i != k)
			{
				tmp = A[i*n+k];
				A[i*n+k] = 0.0f;  // The other place where in matrix becomes result mat
				for (j = 0; j < n; j++)
				{
					A[i*n+j] = A[i*n+j] - A[k*n+j]*tmp;
				}
			}
		}
	}

	// Done, now need to undo pivot row swaps by doing column swaps in reverse order
	for (k = n-1; k >= 0; k--)
	{
		if (pivrows[k] != k)
		{
			for (i = 0; i < n; i++)
			{
				tmp = A[i*n+k];
				A[i*n+k] = A[i*n+pivrows[k]];
				A[i*n+pivrows[k]] = tmp;
			}
		}
	}
	return 1;
}



void setup()
{
  Serial.begin(9600);
  //initI2CMPU();
  
  
}

void loop()
{
  getaccel();
  getheight();
  current=millis()/1000;
  diff=current-previous;
  previous=current;
  updatematrix();
  kalman();
  printX();
}

void kalman()
{
  
  //Measurement update
  MatrixMultiply((float*)H,(float*)X,2,3,1,(float*)TEMP21);
  MatrixSubtract((float*)Z,(float*)TEMP21,2,1,(float*)Y);
  
  MatrixTranspose((float*)H,2,3,(float*)HT);
  MatrixMultiply((float*)H,(float*)P,2,3,3,(float*)TEMP23);
  MatrixMultiply((float*)TEMP23,(float*)HT,2,3,2,(float*)TEMP22);
  MatrixAdd((float*)TEMP22,(float*)R,2,2,(float*)S);
  
  
  MatrixInvert((float*)S,2);
  MatrixMultiply((float*)P,(float*)HT,3,3,2,(float*)TEMP32);
  MatrixMultiply((float*)TEMP32,(float*)S,3,2,2,(float*)K);
  
  MatrixMultiply((float*)K,(float*)Y,3,2,1,(float*)TEMP31);
  MatrixAdd((float*)X,(float*)TEMP31,3,1,(float*)XTEMP);
  MatrixCopy((float*)XTEMP,3,1,(float*)X);
  
  MatrixMultiply((float*)K,(float*)H,3,2,3,(float*)TEMP33);
  MatrixSubtract((float*)I,(float*)TEMP33,3,3,(float*)TEMP33a);
  MatrixMultiply((float*)TEMP33a,(float*)P,3,3,3,(float*)PTEMP);
  MatrixCopy((float*)PTEMP,3,3,(float*)P);
  
  
  //Prediction
  MatrixMultiply((float*)F,(float*)X,3,3,1,(float*)XTEMP);
  MatrixCopy((float*)XTEMP,3,1,(float*)X);
  
  MatrixTranspose((float*)F,3,3,(float*)TEMP33);
  MatrixMultiply((float*)F,(float*)P,3,3,3,(float*)TEMP33a);
  MatrixMultiply((float*)TEMP33a,(float*)TEMP33,3,3,3,(float*)P);  
}
